= プロフェッショナル SSL/TLS 読書会

CAUTION: 第一回 5/12/2017

== 1 SSL/TLS と暗号技術

TLS:TCP/UDP に対して security を提供する

* プレゼンテーション層
* HTTP/2 からはTLS 必須

.1.4 Cryptography

* Kreckhoffs の法則 19 世紀
* 計算量的安全性にその根拠をおいている

.ストリーム暗号
----
cipher = kerstream (+) message
----

* RC4 (弱点あり)
* ECRYPT Stream Cipher Project

.ブロック暗号

* 16byteごと、入力を受け取ってランダムに見える出力を返す。

* AES 非常に安全
* ブロック長は 128bit 固定

* 現像計算困難性
* 弱衝突耐性
* 強衝突耐性


.弱衝突耐性
----
f : m -> hash
m_1, h が与えられているとき
f(m_2) = h となる m_2 を見つけるのが難しい
----

NOTE: SHA1: 弱衝突耐性は突破されていない
パスワードハッシュとして不適切というわけでない

.HMAC
----
H(K (+) opad || H(k (+) ipad|| text))
----

.要素技術

* ECB, text

.乱数生成器

* high entropy な乱数が必要

.プロトコル

* まとまったデータの暗号化はAESで
* サーバに侵入して暗号鍵とろうな

NOTE: 暗号処理のプロトコルは自分で実装しない

.暗号強度

* bit 安全性
* NIST SP-800 57 Part1 Rev.4 の p.64

.MITM攻撃
----
Bobと話しているかのようにAliceに思い込ませる
----

=== 2 プロトコル

* @hmikisato

==== Record プロトコル
* 圧縮は脆弱性となりうるので基本的に行わない
* Fragment は Payload
* 裏で送受信したバッファのシーケンスを数えておく

.HandShake プロトコル
* だいたい三通り
* セッションリザンプション
* クライアント認証を伴うハンドシェイク

* 2RTT

.ClientHello
* Session Id, Cipher Suite, Random, Extentions

.CipherSuite
----
要補足
----

.ServerHello
* ClientHello と形式が同じ
* Session ID はここで決定される

.Certificate
----
X.509 証明書チェーンを返す
----

.ServerKeyExchange
----
POODLE 問題
----

.Certificate

==== クライアント認証

.鍵交換、認証
----
[ Header < IV < Enc < MAC ]
----

.Mac-Then-Encrypt がなぜ脆弱なのか
[NOTE]
EKR 本に書いてある

Nonce, Sequence, Record Msg

.再ネゴシエーション
----
脆弱性の温床
その回避のために renegotiation_info 拡張がある
----

